// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#include "products.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveProcess_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackfillProgress_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BaseProductState_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildConfig_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CachedProductState_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DownloadSettings_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstallHandshake_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LanguageSetting_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductConfig_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProductInstall_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductOperations_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepairProgress_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateProgress_schema_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_schema_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSettings_schema_2eproto;
class LanguageSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LanguageSetting> _instance;
} _LanguageSetting_default_instance_;
class UserSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserSettings> _instance;
} _UserSettings_default_instance_;
class InstallHandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstallHandshake> _instance;
} _InstallHandshake_default_instance_;
class BuildConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildConfig> _instance;
} _BuildConfig_default_instance_;
class BaseProductStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseProductState> _instance;
} _BaseProductState_default_instance_;
class BackfillProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BackfillProgress> _instance;
} _BackfillProgress_default_instance_;
class RepairProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepairProgress> _instance;
} _RepairProgress_default_instance_;
class UpdateProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateProgress> _instance;
} _UpdateProgress_default_instance_;
class CachedProductStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CachedProductState> _instance;
} _CachedProductState_default_instance_;
class ProductOperationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProductOperations> _instance;
} _ProductOperations_default_instance_;
class ProductInstallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProductInstall> _instance;
} _ProductInstall_default_instance_;
class ProductConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProductConfig> _instance;
} _ProductConfig_default_instance_;
class ActiveProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveProcess> _instance;
} _ActiveProcess_default_instance_;
class DownloadSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadSettings> _instance;
} _DownloadSettings_default_instance_;
class ProductDbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProductDb> _instance;
} _ProductDb_default_instance_;
static void InitDefaultsscc_info_ActiveProcess_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ActiveProcess_default_instance_;
    new (ptr) ::ActiveProcess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ActiveProcess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveProcess_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActiveProcess_schema_2eproto}, {}};

static void InitDefaultsscc_info_BackfillProgress_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BackfillProgress_default_instance_;
    new (ptr) ::BackfillProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BackfillProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BackfillProgress_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BackfillProgress_schema_2eproto}, {}};

static void InitDefaultsscc_info_BaseProductState_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BaseProductState_default_instance_;
    new (ptr) ::BaseProductState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BaseProductState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BaseProductState_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BaseProductState_schema_2eproto}, {
      &scc_info_BuildConfig_schema_2eproto.base,}};

static void InitDefaultsscc_info_BuildConfig_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildConfig_default_instance_;
    new (ptr) ::BuildConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BuildConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildConfig_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuildConfig_schema_2eproto}, {}};

static void InitDefaultsscc_info_CachedProductState_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CachedProductState_default_instance_;
    new (ptr) ::CachedProductState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CachedProductState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CachedProductState_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CachedProductState_schema_2eproto}, {
      &scc_info_BaseProductState_schema_2eproto.base,
      &scc_info_BackfillProgress_schema_2eproto.base,
      &scc_info_RepairProgress_schema_2eproto.base,
      &scc_info_UpdateProgress_schema_2eproto.base,}};

static void InitDefaultsscc_info_DownloadSettings_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DownloadSettings_default_instance_;
    new (ptr) ::DownloadSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DownloadSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DownloadSettings_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DownloadSettings_schema_2eproto}, {}};

static void InitDefaultsscc_info_InstallHandshake_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InstallHandshake_default_instance_;
    new (ptr) ::InstallHandshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InstallHandshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstallHandshake_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstallHandshake_schema_2eproto}, {
      &scc_info_UserSettings_schema_2eproto.base,}};

static void InitDefaultsscc_info_LanguageSetting_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LanguageSetting_default_instance_;
    new (ptr) ::LanguageSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LanguageSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LanguageSetting_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LanguageSetting_schema_2eproto}, {}};

static void InitDefaultsscc_info_ProductConfig_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProductConfig_default_instance_;
    new (ptr) ::ProductConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProductConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductConfig_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProductConfig_schema_2eproto}, {}};

static void InitDefaultsscc_info_ProductDb_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProductDb_default_instance_;
    new (ptr) ::ProductDb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProductDb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ProductDb_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ProductDb_schema_2eproto}, {
      &scc_info_ProductInstall_schema_2eproto.base,
      &scc_info_InstallHandshake_schema_2eproto.base,
      &scc_info_ActiveProcess_schema_2eproto.base,
      &scc_info_ProductConfig_schema_2eproto.base,
      &scc_info_DownloadSettings_schema_2eproto.base,}};

static void InitDefaultsscc_info_ProductInstall_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProductInstall_default_instance_;
    new (ptr) ::ProductInstall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProductInstall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProductInstall_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProductInstall_schema_2eproto}, {
      &scc_info_UserSettings_schema_2eproto.base,
      &scc_info_CachedProductState_schema_2eproto.base,
      &scc_info_ProductOperations_schema_2eproto.base,}};

static void InitDefaultsscc_info_ProductOperations_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ProductOperations_default_instance_;
    new (ptr) ::ProductOperations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProductOperations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductOperations_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProductOperations_schema_2eproto}, {}};

static void InitDefaultsscc_info_RepairProgress_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RepairProgress_default_instance_;
    new (ptr) ::RepairProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RepairProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepairProgress_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepairProgress_schema_2eproto}, {}};

static void InitDefaultsscc_info_UpdateProgress_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpdateProgress_default_instance_;
    new (ptr) ::UpdateProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpdateProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateProgress_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateProgress_schema_2eproto}, {}};

static void InitDefaultsscc_info_UserSettings_schema_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserSettings_default_instance_;
    new (ptr) ::UserSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserSettings_schema_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserSettings_schema_2eproto}, {
      &scc_info_LanguageSetting_schema_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_schema_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_schema_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_schema_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_schema_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LanguageSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LanguageSetting, language_),
  PROTOBUF_FIELD_OFFSET(::LanguageSetting, option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserSettings, install_path_),
  PROTOBUF_FIELD_OFFSET(::UserSettings, play_region_),
  PROTOBUF_FIELD_OFFSET(::UserSettings, desktop_shortcut_),
  PROTOBUF_FIELD_OFFSET(::UserSettings, startmenu_shortcut_),
  PROTOBUF_FIELD_OFFSET(::UserSettings, language_settings_),
  PROTOBUF_FIELD_OFFSET(::UserSettings, selected_text_language_),
  PROTOBUF_FIELD_OFFSET(::UserSettings, selected_speech_language_),
  PROTOBUF_FIELD_OFFSET(::UserSettings, languages_),
  PROTOBUF_FIELD_OFFSET(::UserSettings, gfx_override_tags_),
  PROTOBUF_FIELD_OFFSET(::UserSettings, versionbranch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InstallHandshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InstallHandshake, product_),
  PROTOBUF_FIELD_OFFSET(::InstallHandshake, uid_),
  PROTOBUF_FIELD_OFFSET(::InstallHandshake, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildConfig, region_),
  PROTOBUF_FIELD_OFFSET(::BuildConfig, build_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BaseProductState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BaseProductState, installed_),
  PROTOBUF_FIELD_OFFSET(::BaseProductState, playable_),
  PROTOBUF_FIELD_OFFSET(::BaseProductState, update_complete_),
  PROTOBUF_FIELD_OFFSET(::BaseProductState, background_download_available_),
  PROTOBUF_FIELD_OFFSET(::BaseProductState, background_download_complete_),
  PROTOBUF_FIELD_OFFSET(::BaseProductState, current_version_),
  PROTOBUF_FIELD_OFFSET(::BaseProductState, current_version_str_),
  PROTOBUF_FIELD_OFFSET(::BaseProductState, installed_build_config_),
  PROTOBUF_FIELD_OFFSET(::BaseProductState, background_download_build_config_),
  PROTOBUF_FIELD_OFFSET(::BaseProductState, decryption_key_),
  PROTOBUF_FIELD_OFFSET(::BaseProductState, completed_install_actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BackfillProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BackfillProgress, progress_),
  PROTOBUF_FIELD_OFFSET(::BackfillProgress, backgrounddownload_),
  PROTOBUF_FIELD_OFFSET(::BackfillProgress, paused_),
  PROTOBUF_FIELD_OFFSET(::BackfillProgress, download_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RepairProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RepairProgress, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpdateProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpdateProgress, last_disc_set_used_),
  PROTOBUF_FIELD_OFFSET(::UpdateProgress, progress_),
  PROTOBUF_FIELD_OFFSET(::UpdateProgress, disc_ignored_),
  PROTOBUF_FIELD_OFFSET(::UpdateProgress, total_to_download_),
  PROTOBUF_FIELD_OFFSET(::UpdateProgress, download_remaining_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CachedProductState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CachedProductState, base_product_state_),
  PROTOBUF_FIELD_OFFSET(::CachedProductState, backfill_progress_),
  PROTOBUF_FIELD_OFFSET(::CachedProductState, repair_progress_),
  PROTOBUF_FIELD_OFFSET(::CachedProductState, update_progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProductOperations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProductOperations, active_operation_),
  PROTOBUF_FIELD_OFFSET(::ProductOperations, priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProductInstall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProductInstall, uid_),
  PROTOBUF_FIELD_OFFSET(::ProductInstall, product_code_),
  PROTOBUF_FIELD_OFFSET(::ProductInstall, settings_),
  PROTOBUF_FIELD_OFFSET(::ProductInstall, cached_product_state_),
  PROTOBUF_FIELD_OFFSET(::ProductInstall, product_operations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProductConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProductConfig, product_code_),
  PROTOBUF_FIELD_OFFSET(::ProductConfig, metadata_hash_),
  PROTOBUF_FIELD_OFFSET(::ProductConfig, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ActiveProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ActiveProcess, process_name_),
  PROTOBUF_FIELD_OFFSET(::ActiveProcess, pid_),
  PROTOBUF_FIELD_OFFSET(::ActiveProcess, uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DownloadSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DownloadSettings, download_limit_),
  PROTOBUF_FIELD_OFFSET(::DownloadSettings, backfill_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProductDb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProductDb, product_installs_),
  PROTOBUF_FIELD_OFFSET(::ProductDb, active_installs_),
  PROTOBUF_FIELD_OFFSET(::ProductDb, active_processes_),
  PROTOBUF_FIELD_OFFSET(::ProductDb, product_configs_),
  PROTOBUF_FIELD_OFFSET(::ProductDb, download_settings_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LanguageSetting)},
  { 7, -1, sizeof(::UserSettings)},
  { 22, -1, sizeof(::InstallHandshake)},
  { 30, -1, sizeof(::BuildConfig)},
  { 37, -1, sizeof(::BaseProductState)},
  { 53, -1, sizeof(::BackfillProgress)},
  { 62, -1, sizeof(::RepairProgress)},
  { 68, -1, sizeof(::UpdateProgress)},
  { 78, -1, sizeof(::CachedProductState)},
  { 87, -1, sizeof(::ProductOperations)},
  { 94, -1, sizeof(::ProductInstall)},
  { 104, -1, sizeof(::ProductConfig)},
  { 112, -1, sizeof(::ActiveProcess)},
  { 120, -1, sizeof(::DownloadSettings)},
  { 127, -1, sizeof(::ProductDb)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LanguageSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InstallHandshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BaseProductState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BackfillProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RepairProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpdateProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CachedProductState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProductOperations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProductInstall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProductConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ActiveProcess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DownloadSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ProductDb_default_instance_),
};

const char descriptor_table_protodef_schema_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014schema.proto\"D\n\017LanguageSetting\022\020\n\010lan"
  "guage\030\001 \001(\t\022\037\n\006option\030\002 \001(\0162\017.LanguageOp"
  "tion\"\333\002\n\014UserSettings\022\024\n\014install_path\030\001 "
  "\001(\t\022\023\n\013play_region\030\002 \001(\t\022)\n\020desktop_shor"
  "tcut\030\003 \001(\0162\017.ShortcutOption\022+\n\022startmenu"
  "_shortcut\030\004 \001(\0162\017.ShortcutOption\022/\n\021lang"
  "uage_settings\030\005 \001(\0162\024.LanguageSettingTyp"
  "e\022\036\n\026selected_text_language\030\006 \001(\t\022 \n\030sel"
  "ected_speech_language\030\007 \001(\t\022#\n\tlanguages"
  "\030\010 \003(\0132\020.LanguageSetting\022\031\n\021gfx_override"
  "_tags\030\t \001(\t\022\025\n\rversionbranch\030\n \001(\t\"Q\n\020In"
  "stallHandshake\022\017\n\007product\030\001 \001(\t\022\013\n\003uid\030\002"
  " \001(\t\022\037\n\010settings\030\003 \001(\0132\r.UserSettings\"3\n"
  "\013BuildConfig\022\016\n\006region\030\001 \001(\t\022\024\n\014build_co"
  "nfig\030\002 \001(\t\"\364\002\n\020BaseProductState\022\021\n\tinsta"
  "lled\030\001 \001(\010\022\020\n\010playable\030\002 \001(\010\022\027\n\017update_c"
  "omplete\030\003 \001(\010\022%\n\035background_download_ava"
  "ilable\030\004 \001(\010\022$\n\034background_download_comp"
  "lete\030\005 \001(\010\022\027\n\017current_version\030\006 \001(\t\022\033\n\023c"
  "urrent_version_str\030\007 \001(\t\022,\n\026installed_bu"
  "ild_config\030\010 \003(\0132\014.BuildConfig\0226\n backgr"
  "ound_download_build_config\030\t \003(\0132\014.Build"
  "Config\022\026\n\016decryption_key\030\n \001(\t\022!\n\031comple"
  "ted_install_actions\030\013 \003(\t\"h\n\020BackfillPro"
  "gress\022\020\n\010progress\030\001 \001(\001\022\032\n\022backgrounddow"
  "nload\030\002 \001(\010\022\016\n\006paused\030\003 \001(\010\022\026\n\016download_"
  "limit\030\004 \001(\004\"\"\n\016RepairProgress\022\020\n\010progres"
  "s\030\001 \001(\001\"\213\001\n\016UpdateProgress\022\032\n\022last_disc_"
  "set_used\030\001 \001(\t\022\020\n\010progress\030\002 \001(\001\022\024\n\014disc"
  "_ignored\030\003 \001(\010\022\031\n\021total_to_download\030\004 \001("
  "\004\022\032\n\022download_remaining\030\005 \001(\004\"\305\001\n\022Cached"
  "ProductState\022-\n\022base_product_state\030\001 \001(\013"
  "2\021.BaseProductState\022,\n\021backfill_progress"
  "\030\002 \001(\0132\021.BackfillProgress\022(\n\017repair_prog"
  "ress\030\003 \001(\0132\017.RepairProgress\022(\n\017update_pr"
  "ogress\030\004 \001(\0132\017.UpdateProgress\"K\n\021Product"
  "Operations\022$\n\020active_operation\030\001 \001(\0162\n.O"
  "peration\022\020\n\010priority\030\002 \001(\004\"\267\001\n\016ProductIn"
  "stall\022\013\n\003uid\030\001 \001(\t\022\024\n\014product_code\030\002 \001(\t"
  "\022\037\n\010settings\030\003 \001(\0132\r.UserSettings\0221\n\024cac"
  "hed_product_state\030\004 \001(\0132\023.CachedProductS"
  "tate\022.\n\022product_operations\030\005 \001(\0132\022.Produ"
  "ctOperations\"O\n\rProductConfig\022\024\n\014product"
  "_code\030\001 \001(\t\022\025\n\rmetadata_hash\030\002 \001(\t\022\021\n\tti"
  "mestamp\030\003 \001(\t\"\?\n\rActiveProcess\022\024\n\014proces"
  "s_name\030\001 \001(\t\022\013\n\003pid\030\002 \001(\005\022\013\n\003uri\030\003 \003(\t\"B"
  "\n\020DownloadSettings\022\026\n\016download_limit\030\001 \001"
  "(\005\022\026\n\016backfill_limit\030\002 \001(\005\"\343\001\n\tProductDb"
  "\022)\n\020product_installs\030\001 \003(\0132\017.ProductInst"
  "all\022*\n\017active_installs\030\002 \003(\0132\021.InstallHa"
  "ndshake\022(\n\020active_processes\030\003 \003(\0132\016.Acti"
  "veProcess\022\'\n\017product_configs\030\004 \003(\0132\016.Pro"
  "ductConfig\022,\n\021download_settings\030\005 \001(\0132\021."
  "DownloadSettings*q\n\016LanguageOption\022\023\n\017LA"
  "NGOPTION_NONE\020\000\022\023\n\017LANGOPTION_TEXT\020\001\022\025\n\021"
  "LANGOPTION_SPEECH\020\002\022\036\n\032LANGOPTION_TEXT_A"
  "ND_SPEECH\020\003*u\n\023LanguageSettingType\022\024\n\020LA"
  "NGSETTING_NONE\020\000\022\026\n\022LANGSETTING_SINGLE\020\001"
  "\022\026\n\022LANGSETTING_SIMPLE\020\002\022\030\n\024LANGSETTING_"
  "ADVANCED\020\003*N\n\016ShortcutOption\022\021\n\rSHORTCUT"
  "_NONE\020\000\022\021\n\rSHORTCUT_USER\020\001\022\026\n\022SHORTCUT_A"
  "LL_USERS\020\002*P\n\tOperation\022\r\n\tOP_UPDATE\020\000\022\017"
  "\n\013OP_BACKFILL\020\001\022\r\n\tOP_REPAIR\020\002\022\024\n\007OP_NON"
  "E\020\377\377\377\377\377\377\377\377\377\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_schema_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_schema_2eproto_sccs[15] = {
  &scc_info_ActiveProcess_schema_2eproto.base,
  &scc_info_BackfillProgress_schema_2eproto.base,
  &scc_info_BaseProductState_schema_2eproto.base,
  &scc_info_BuildConfig_schema_2eproto.base,
  &scc_info_CachedProductState_schema_2eproto.base,
  &scc_info_DownloadSettings_schema_2eproto.base,
  &scc_info_InstallHandshake_schema_2eproto.base,
  &scc_info_LanguageSetting_schema_2eproto.base,
  &scc_info_ProductConfig_schema_2eproto.base,
  &scc_info_ProductDb_schema_2eproto.base,
  &scc_info_ProductInstall_schema_2eproto.base,
  &scc_info_ProductOperations_schema_2eproto.base,
  &scc_info_RepairProgress_schema_2eproto.base,
  &scc_info_UpdateProgress_schema_2eproto.base,
  &scc_info_UserSettings_schema_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_schema_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schema_2eproto = {
  false, false, descriptor_table_protodef_schema_2eproto, "schema.proto", 2540,
  &descriptor_table_schema_2eproto_once, descriptor_table_schema_2eproto_sccs, descriptor_table_schema_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_schema_2eproto::offsets,
  file_level_metadata_schema_2eproto, 15, file_level_enum_descriptors_schema_2eproto, file_level_service_descriptors_schema_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_schema_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_schema_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[0];
}
bool LanguageOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LanguageSettingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[1];
}
bool LanguageSettingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShortcutOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[2];
}
bool ShortcutOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[3];
}
bool Operation_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LanguageSetting::InitAsDefaultInstance() {
}
class LanguageSetting::_Internal {
 public:
};

LanguageSetting::LanguageSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LanguageSetting)
}
LanguageSetting::LanguageSetting(const LanguageSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language(),
      GetArena());
  }
  option_ = from.option_;
  // @@protoc_insertion_point(copy_constructor:LanguageSetting)
}

void LanguageSetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LanguageSetting_schema_2eproto.base);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  option_ = 0;
}

LanguageSetting::~LanguageSetting() {
  // @@protoc_insertion_point(destructor:LanguageSetting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LanguageSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LanguageSetting::ArenaDtor(void* object) {
  LanguageSetting* _this = reinterpret_cast< LanguageSetting* >(object);
  (void)_this;
}
void LanguageSetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LanguageSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LanguageSetting& LanguageSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LanguageSetting_schema_2eproto.base);
  return *internal_default_instance();
}


void LanguageSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:LanguageSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  option_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanguageSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LanguageSetting.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LanguageOption option = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_option(static_cast<::LanguageOption>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LanguageSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LanguageSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language = 1;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LanguageSetting.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // .LanguageOption option = 2;
  if (this->option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_option(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LanguageSetting)
  return target;
}

size_t LanguageSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LanguageSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language = 1;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .LanguageOption option = 2;
  if (this->option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_option());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LanguageSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LanguageSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const LanguageSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LanguageSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LanguageSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LanguageSetting)
    MergeFrom(*source);
  }
}

void LanguageSetting::MergeFrom(const LanguageSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LanguageSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language().size() > 0) {
    _internal_set_language(from._internal_language());
  }
  if (from.option() != 0) {
    _internal_set_option(from._internal_option());
  }
}

void LanguageSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LanguageSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanguageSetting::CopyFrom(const LanguageSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LanguageSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanguageSetting::IsInitialized() const {
  return true;
}

void LanguageSetting::InternalSwap(LanguageSetting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(option_, other->option_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LanguageSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserSettings::InitAsDefaultInstance() {
}
class UserSettings::_Internal {
 public:
};

UserSettings::UserSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  languages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UserSettings)
}
UserSettings::UserSettings(const UserSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  install_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_install_path().empty()) {
    install_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_install_path(),
      GetArena());
  }
  play_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_play_region().empty()) {
    play_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_play_region(),
      GetArena());
  }
  selected_text_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_selected_text_language().empty()) {
    selected_text_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_selected_text_language(),
      GetArena());
  }
  selected_speech_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_selected_speech_language().empty()) {
    selected_speech_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_selected_speech_language(),
      GetArena());
  }
  gfx_override_tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gfx_override_tags().empty()) {
    gfx_override_tags_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gfx_override_tags(),
      GetArena());
  }
  versionbranch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_versionbranch().empty()) {
    versionbranch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_versionbranch(),
      GetArena());
  }
  ::memcpy(&desktop_shortcut_, &from.desktop_shortcut_,
    static_cast<size_t>(reinterpret_cast<char*>(&language_settings_) -
    reinterpret_cast<char*>(&desktop_shortcut_)) + sizeof(language_settings_));
  // @@protoc_insertion_point(copy_constructor:UserSettings)
}

void UserSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserSettings_schema_2eproto.base);
  install_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  play_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selected_text_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selected_speech_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gfx_override_tags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  versionbranch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&desktop_shortcut_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&language_settings_) -
      reinterpret_cast<char*>(&desktop_shortcut_)) + sizeof(language_settings_));
}

UserSettings::~UserSettings() {
  // @@protoc_insertion_point(destructor:UserSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  install_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  play_region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selected_text_language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  selected_speech_language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gfx_override_tags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  versionbranch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserSettings::ArenaDtor(void* object) {
  UserSettings* _this = reinterpret_cast< UserSettings* >(object);
  (void)_this;
}
void UserSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserSettings& UserSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserSettings_schema_2eproto.base);
  return *internal_default_instance();
}


void UserSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:UserSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  languages_.Clear();
  install_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  play_region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  selected_text_language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  selected_speech_language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gfx_override_tags_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  versionbranch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&desktop_shortcut_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&language_settings_) -
      reinterpret_cast<char*>(&desktop_shortcut_)) + sizeof(language_settings_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string install_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_install_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserSettings.install_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string play_region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_play_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserSettings.play_region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ShortcutOption desktop_shortcut = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_desktop_shortcut(static_cast<::ShortcutOption>(val));
        } else goto handle_unusual;
        continue;
      // .ShortcutOption startmenu_shortcut = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_startmenu_shortcut(static_cast<::ShortcutOption>(val));
        } else goto handle_unusual;
        continue;
      // .LanguageSettingType language_settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language_settings(static_cast<::LanguageSettingType>(val));
        } else goto handle_unusual;
        continue;
      // string selected_text_language = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_selected_text_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserSettings.selected_text_language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string selected_speech_language = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_selected_speech_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserSettings.selected_speech_language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .LanguageSetting languages = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string gfx_override_tags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_gfx_override_tags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserSettings.gfx_override_tags"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string versionbranch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_versionbranch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UserSettings.versionbranch"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string install_path = 1;
  if (this->install_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_install_path().data(), static_cast<int>(this->_internal_install_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserSettings.install_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_install_path(), target);
  }

  // string play_region = 2;
  if (this->play_region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_play_region().data(), static_cast<int>(this->_internal_play_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserSettings.play_region");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_play_region(), target);
  }

  // .ShortcutOption desktop_shortcut = 3;
  if (this->desktop_shortcut() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_desktop_shortcut(), target);
  }

  // .ShortcutOption startmenu_shortcut = 4;
  if (this->startmenu_shortcut() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_startmenu_shortcut(), target);
  }

  // .LanguageSettingType language_settings = 5;
  if (this->language_settings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_language_settings(), target);
  }

  // string selected_text_language = 6;
  if (this->selected_text_language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selected_text_language().data(), static_cast<int>(this->_internal_selected_text_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserSettings.selected_text_language");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_selected_text_language(), target);
  }

  // string selected_speech_language = 7;
  if (this->selected_speech_language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_selected_speech_language().data(), static_cast<int>(this->_internal_selected_speech_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserSettings.selected_speech_language");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_selected_speech_language(), target);
  }

  // repeated .LanguageSetting languages = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_languages(i), target, stream);
  }

  // string gfx_override_tags = 9;
  if (this->gfx_override_tags().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gfx_override_tags().data(), static_cast<int>(this->_internal_gfx_override_tags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserSettings.gfx_override_tags");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_gfx_override_tags(), target);
  }

  // string versionbranch = 10;
  if (this->versionbranch().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_versionbranch().data(), static_cast<int>(this->_internal_versionbranch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserSettings.versionbranch");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_versionbranch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserSettings)
  return target;
}

size_t UserSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LanguageSetting languages = 8;
  total_size += 1UL * this->_internal_languages_size();
  for (const auto& msg : this->languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string install_path = 1;
  if (this->install_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_install_path());
  }

  // string play_region = 2;
  if (this->play_region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_play_region());
  }

  // string selected_text_language = 6;
  if (this->selected_text_language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selected_text_language());
  }

  // string selected_speech_language = 7;
  if (this->selected_speech_language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_selected_speech_language());
  }

  // string gfx_override_tags = 9;
  if (this->gfx_override_tags().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gfx_override_tags());
  }

  // string versionbranch = 10;
  if (this->versionbranch().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_versionbranch());
  }

  // .ShortcutOption desktop_shortcut = 3;
  if (this->desktop_shortcut() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_desktop_shortcut());
  }

  // .ShortcutOption startmenu_shortcut = 4;
  if (this->startmenu_shortcut() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_startmenu_shortcut());
  }

  // .LanguageSettingType language_settings = 5;
  if (this->language_settings() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language_settings());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserSettings)
    MergeFrom(*source);
  }
}

void UserSettings::MergeFrom(const UserSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  languages_.MergeFrom(from.languages_);
  if (from.install_path().size() > 0) {
    _internal_set_install_path(from._internal_install_path());
  }
  if (from.play_region().size() > 0) {
    _internal_set_play_region(from._internal_play_region());
  }
  if (from.selected_text_language().size() > 0) {
    _internal_set_selected_text_language(from._internal_selected_text_language());
  }
  if (from.selected_speech_language().size() > 0) {
    _internal_set_selected_speech_language(from._internal_selected_speech_language());
  }
  if (from.gfx_override_tags().size() > 0) {
    _internal_set_gfx_override_tags(from._internal_gfx_override_tags());
  }
  if (from.versionbranch().size() > 0) {
    _internal_set_versionbranch(from._internal_versionbranch());
  }
  if (from.desktop_shortcut() != 0) {
    _internal_set_desktop_shortcut(from._internal_desktop_shortcut());
  }
  if (from.startmenu_shortcut() != 0) {
    _internal_set_startmenu_shortcut(from._internal_startmenu_shortcut());
  }
  if (from.language_settings() != 0) {
    _internal_set_language_settings(from._internal_language_settings());
  }
}

void UserSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSettings::CopyFrom(const UserSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSettings::IsInitialized() const {
  return true;
}

void UserSettings::InternalSwap(UserSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  languages_.InternalSwap(&other->languages_);
  install_path_.Swap(&other->install_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  play_region_.Swap(&other->play_region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  selected_text_language_.Swap(&other->selected_text_language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  selected_speech_language_.Swap(&other->selected_speech_language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gfx_override_tags_.Swap(&other->gfx_override_tags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  versionbranch_.Swap(&other->versionbranch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserSettings, language_settings_)
      + sizeof(UserSettings::language_settings_)
      - PROTOBUF_FIELD_OFFSET(UserSettings, desktop_shortcut_)>(
          reinterpret_cast<char*>(&desktop_shortcut_),
          reinterpret_cast<char*>(&other->desktop_shortcut_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstallHandshake::InitAsDefaultInstance() {
  ::_InstallHandshake_default_instance_._instance.get_mutable()->settings_ = const_cast< ::UserSettings*>(
      ::UserSettings::internal_default_instance());
}
class InstallHandshake::_Internal {
 public:
  static const ::UserSettings& settings(const InstallHandshake* msg);
};

const ::UserSettings&
InstallHandshake::_Internal::settings(const InstallHandshake* msg) {
  return *msg->settings_;
}
InstallHandshake::InstallHandshake(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:InstallHandshake)
}
InstallHandshake::InstallHandshake(const InstallHandshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product().empty()) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product(),
      GetArena());
  }
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uid(),
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::UserSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:InstallHandshake)
}

void InstallHandshake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstallHandshake_schema_2eproto.base);
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  settings_ = nullptr;
}

InstallHandshake::~InstallHandshake() {
  // @@protoc_insertion_point(destructor:InstallHandshake)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstallHandshake::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  product_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void InstallHandshake::ArenaDtor(void* object) {
  InstallHandshake* _this = reinterpret_cast< InstallHandshake* >(object);
  (void)_this;
}
void InstallHandshake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstallHandshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstallHandshake& InstallHandshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstallHandshake_schema_2eproto.base);
  return *internal_default_instance();
}


void InstallHandshake::Clear() {
// @@protoc_insertion_point(message_clear_start:InstallHandshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstallHandshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstallHandshake.product"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "InstallHandshake.uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UserSettings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstallHandshake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstallHandshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product = 1;
  if (this->product().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstallHandshake.product");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product(), target);
  }

  // string uid = 2;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "InstallHandshake.uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uid(), target);
  }

  // .UserSettings settings = 3;
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstallHandshake)
  return target;
}

size_t InstallHandshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InstallHandshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string product = 1;
  if (this->product().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product());
  }

  // string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // .UserSettings settings = 3;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstallHandshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InstallHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  const InstallHandshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstallHandshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InstallHandshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InstallHandshake)
    MergeFrom(*source);
  }
}

void InstallHandshake::MergeFrom(const InstallHandshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InstallHandshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product().size() > 0) {
    _internal_set_product(from._internal_product());
  }
  if (from.uid().size() > 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::UserSettings::MergeFrom(from._internal_settings());
  }
}

void InstallHandshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InstallHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallHandshake::CopyFrom(const InstallHandshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InstallHandshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallHandshake::IsInitialized() const {
  return true;
}

void InstallHandshake::InternalSwap(InstallHandshake* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  product_.Swap(&other->product_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstallHandshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildConfig::InitAsDefaultInstance() {
}
class BuildConfig::_Internal {
 public:
};

BuildConfig::BuildConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildConfig)
}
BuildConfig::BuildConfig(const BuildConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region(),
      GetArena());
  }
  build_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_build_config().empty()) {
    build_config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_build_config(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BuildConfig)
}

void BuildConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildConfig_schema_2eproto.base);
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BuildConfig::~BuildConfig() {
  // @@protoc_insertion_point(destructor:BuildConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuildConfig::ArenaDtor(void* object) {
  BuildConfig* _this = reinterpret_cast< BuildConfig* >(object);
  (void)_this;
}
void BuildConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildConfig& BuildConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildConfig_schema_2eproto.base);
  return *internal_default_instance();
}


void BuildConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_config_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BuildConfig.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string build_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_build_config();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BuildConfig.build_config"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildConfig.region");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_region(), target);
  }

  // string build_config = 2;
  if (this->build_config().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build_config().data(), static_cast<int>(this->_internal_build_config().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildConfig.build_config");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_build_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildConfig)
  return target;
}

size_t BuildConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 1;
  if (this->region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string build_config = 2;
  if (this->build_config().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build_config());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildConfig)
    MergeFrom(*source);
  }
}

void BuildConfig::MergeFrom(const BuildConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.region().size() > 0) {
    _internal_set_region(from._internal_region());
  }
  if (from.build_config().size() > 0) {
    _internal_set_build_config(from._internal_build_config());
  }
}

void BuildConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildConfig::CopyFrom(const BuildConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildConfig::IsInitialized() const {
  return true;
}

void BuildConfig::InternalSwap(BuildConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_config_.Swap(&other->build_config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseProductState::InitAsDefaultInstance() {
}
class BaseProductState::_Internal {
 public:
};

BaseProductState::BaseProductState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  installed_build_config_(arena),
  background_download_build_config_(arena),
  completed_install_actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BaseProductState)
}
BaseProductState::BaseProductState(const BaseProductState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      installed_build_config_(from.installed_build_config_),
      background_download_build_config_(from.background_download_build_config_),
      completed_install_actions_(from.completed_install_actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_version().empty()) {
    current_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_current_version(),
      GetArena());
  }
  current_version_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_version_str().empty()) {
    current_version_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_current_version_str(),
      GetArena());
  }
  decryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_decryption_key().empty()) {
    decryption_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_decryption_key(),
      GetArena());
  }
  ::memcpy(&installed_, &from.installed_,
    static_cast<size_t>(reinterpret_cast<char*>(&background_download_complete_) -
    reinterpret_cast<char*>(&installed_)) + sizeof(background_download_complete_));
  // @@protoc_insertion_point(copy_constructor:BaseProductState)
}

void BaseProductState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseProductState_schema_2eproto.base);
  current_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_version_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decryption_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&installed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_download_complete_) -
      reinterpret_cast<char*>(&installed_)) + sizeof(background_download_complete_));
}

BaseProductState::~BaseProductState() {
  // @@protoc_insertion_point(destructor:BaseProductState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseProductState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  current_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_version_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  decryption_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BaseProductState::ArenaDtor(void* object) {
  BaseProductState* _this = reinterpret_cast< BaseProductState* >(object);
  (void)_this;
}
void BaseProductState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseProductState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseProductState& BaseProductState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseProductState_schema_2eproto.base);
  return *internal_default_instance();
}


void BaseProductState::Clear() {
// @@protoc_insertion_point(message_clear_start:BaseProductState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  installed_build_config_.Clear();
  background_download_build_config_.Clear();
  completed_install_actions_.Clear();
  current_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_version_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  decryption_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&installed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_download_complete_) -
      reinterpret_cast<char*>(&installed_)) + sizeof(background_download_complete_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseProductState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool installed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          installed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool playable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool update_complete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool background_download_available = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          background_download_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool background_download_complete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          background_download_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_current_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BaseProductState.current_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string current_version_str = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_current_version_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BaseProductState.current_version_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BuildConfig installed_build_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_installed_build_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .BuildConfig background_download_build_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_background_download_build_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // string decryption_key = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_decryption_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BaseProductState.decryption_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string completed_install_actions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_completed_install_actions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BaseProductState.completed_install_actions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseProductState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BaseProductState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool installed = 1;
  if (this->installed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_installed(), target);
  }

  // bool playable = 2;
  if (this->playable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_playable(), target);
  }

  // bool update_complete = 3;
  if (this->update_complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_update_complete(), target);
  }

  // bool background_download_available = 4;
  if (this->background_download_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_background_download_available(), target);
  }

  // bool background_download_complete = 5;
  if (this->background_download_complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_background_download_complete(), target);
  }

  // string current_version = 6;
  if (this->current_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_version().data(), static_cast<int>(this->_internal_current_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BaseProductState.current_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_current_version(), target);
  }

  // string current_version_str = 7;
  if (this->current_version_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_version_str().data(), static_cast<int>(this->_internal_current_version_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BaseProductState.current_version_str");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_current_version_str(), target);
  }

  // repeated .BuildConfig installed_build_config = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_installed_build_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_installed_build_config(i), target, stream);
  }

  // repeated .BuildConfig background_download_build_config = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_background_download_build_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_background_download_build_config(i), target, stream);
  }

  // string decryption_key = 10;
  if (this->decryption_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_decryption_key().data(), static_cast<int>(this->_internal_decryption_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BaseProductState.decryption_key");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_decryption_key(), target);
  }

  // repeated string completed_install_actions = 11;
  for (int i = 0, n = this->_internal_completed_install_actions_size(); i < n; i++) {
    const auto& s = this->_internal_completed_install_actions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BaseProductState.completed_install_actions");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BaseProductState)
  return target;
}

size_t BaseProductState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BaseProductState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BuildConfig installed_build_config = 8;
  total_size += 1UL * this->_internal_installed_build_config_size();
  for (const auto& msg : this->installed_build_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BuildConfig background_download_build_config = 9;
  total_size += 1UL * this->_internal_background_download_build_config_size();
  for (const auto& msg : this->background_download_build_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string completed_install_actions = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(completed_install_actions_.size());
  for (int i = 0, n = completed_install_actions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      completed_install_actions_.Get(i));
  }

  // string current_version = 6;
  if (this->current_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_version());
  }

  // string current_version_str = 7;
  if (this->current_version_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_version_str());
  }

  // string decryption_key = 10;
  if (this->decryption_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_decryption_key());
  }

  // bool installed = 1;
  if (this->installed() != 0) {
    total_size += 1 + 1;
  }

  // bool playable = 2;
  if (this->playable() != 0) {
    total_size += 1 + 1;
  }

  // bool update_complete = 3;
  if (this->update_complete() != 0) {
    total_size += 1 + 1;
  }

  // bool background_download_available = 4;
  if (this->background_download_available() != 0) {
    total_size += 1 + 1;
  }

  // bool background_download_complete = 5;
  if (this->background_download_complete() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseProductState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BaseProductState)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseProductState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseProductState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BaseProductState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BaseProductState)
    MergeFrom(*source);
  }
}

void BaseProductState::MergeFrom(const BaseProductState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BaseProductState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  installed_build_config_.MergeFrom(from.installed_build_config_);
  background_download_build_config_.MergeFrom(from.background_download_build_config_);
  completed_install_actions_.MergeFrom(from.completed_install_actions_);
  if (from.current_version().size() > 0) {
    _internal_set_current_version(from._internal_current_version());
  }
  if (from.current_version_str().size() > 0) {
    _internal_set_current_version_str(from._internal_current_version_str());
  }
  if (from.decryption_key().size() > 0) {
    _internal_set_decryption_key(from._internal_decryption_key());
  }
  if (from.installed() != 0) {
    _internal_set_installed(from._internal_installed());
  }
  if (from.playable() != 0) {
    _internal_set_playable(from._internal_playable());
  }
  if (from.update_complete() != 0) {
    _internal_set_update_complete(from._internal_update_complete());
  }
  if (from.background_download_available() != 0) {
    _internal_set_background_download_available(from._internal_background_download_available());
  }
  if (from.background_download_complete() != 0) {
    _internal_set_background_download_complete(from._internal_background_download_complete());
  }
}

void BaseProductState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BaseProductState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseProductState::CopyFrom(const BaseProductState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BaseProductState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseProductState::IsInitialized() const {
  return true;
}

void BaseProductState::InternalSwap(BaseProductState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  installed_build_config_.InternalSwap(&other->installed_build_config_);
  background_download_build_config_.InternalSwap(&other->background_download_build_config_);
  completed_install_actions_.InternalSwap(&other->completed_install_actions_);
  current_version_.Swap(&other->current_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_version_str_.Swap(&other->current_version_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  decryption_key_.Swap(&other->decryption_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseProductState, background_download_complete_)
      + sizeof(BaseProductState::background_download_complete_)
      - PROTOBUF_FIELD_OFFSET(BaseProductState, installed_)>(
          reinterpret_cast<char*>(&installed_),
          reinterpret_cast<char*>(&other->installed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseProductState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BackfillProgress::InitAsDefaultInstance() {
}
class BackfillProgress::_Internal {
 public:
};

BackfillProgress::BackfillProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BackfillProgress)
}
BackfillProgress::BackfillProgress(const BackfillProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&paused_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(paused_));
  // @@protoc_insertion_point(copy_constructor:BackfillProgress)
}

void BackfillProgress::SharedCtor() {
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paused_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(paused_));
}

BackfillProgress::~BackfillProgress() {
  // @@protoc_insertion_point(destructor:BackfillProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BackfillProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BackfillProgress::ArenaDtor(void* object) {
  BackfillProgress* _this = reinterpret_cast< BackfillProgress* >(object);
  (void)_this;
}
void BackfillProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackfillProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BackfillProgress& BackfillProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BackfillProgress_schema_2eproto.base);
  return *internal_default_instance();
}


void BackfillProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:BackfillProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paused_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(paused_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackfillProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool backgrounddownload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          backgrounddownload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool paused = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 download_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          download_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackfillProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackfillProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double progress = 1;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_progress(), target);
  }

  // bool backgrounddownload = 2;
  if (this->backgrounddownload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_backgrounddownload(), target);
  }

  // bool paused = 3;
  if (this->paused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_paused(), target);
  }

  // uint64 download_limit = 4;
  if (this->download_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_download_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackfillProgress)
  return target;
}

size_t BackfillProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BackfillProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double progress = 1;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 download_limit = 4;
  if (this->download_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_download_limit());
  }

  // bool backgrounddownload = 2;
  if (this->backgrounddownload() != 0) {
    total_size += 1 + 1;
  }

  // bool paused = 3;
  if (this->paused() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackfillProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BackfillProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const BackfillProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BackfillProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BackfillProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BackfillProgress)
    MergeFrom(*source);
  }
}

void BackfillProgress::MergeFrom(const BackfillProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BackfillProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    _internal_set_progress(from._internal_progress());
  }
  if (from.download_limit() != 0) {
    _internal_set_download_limit(from._internal_download_limit());
  }
  if (from.backgrounddownload() != 0) {
    _internal_set_backgrounddownload(from._internal_backgrounddownload());
  }
  if (from.paused() != 0) {
    _internal_set_paused(from._internal_paused());
  }
}

void BackfillProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BackfillProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackfillProgress::CopyFrom(const BackfillProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BackfillProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackfillProgress::IsInitialized() const {
  return true;
}

void BackfillProgress::InternalSwap(BackfillProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackfillProgress, paused_)
      + sizeof(BackfillProgress::paused_)
      - PROTOBUF_FIELD_OFFSET(BackfillProgress, progress_)>(
          reinterpret_cast<char*>(&progress_),
          reinterpret_cast<char*>(&other->progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BackfillProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RepairProgress::InitAsDefaultInstance() {
}
class RepairProgress::_Internal {
 public:
};

RepairProgress::RepairProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RepairProgress)
}
RepairProgress::RepairProgress(const RepairProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:RepairProgress)
}

void RepairProgress::SharedCtor() {
  progress_ = 0;
}

RepairProgress::~RepairProgress() {
  // @@protoc_insertion_point(destructor:RepairProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RepairProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RepairProgress::ArenaDtor(void* object) {
  RepairProgress* _this = reinterpret_cast< RepairProgress* >(object);
  (void)_this;
}
void RepairProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RepairProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepairProgress& RepairProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepairProgress_schema_2eproto.base);
  return *internal_default_instance();
}


void RepairProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:RepairProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepairProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepairProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RepairProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double progress = 1;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RepairProgress)
  return target;
}

size_t RepairProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RepairProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double progress = 1;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepairProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RepairProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const RepairProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepairProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RepairProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RepairProgress)
    MergeFrom(*source);
  }
}

void RepairProgress::MergeFrom(const RepairProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RepairProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    _internal_set_progress(from._internal_progress());
  }
}

void RepairProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RepairProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepairProgress::CopyFrom(const RepairProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RepairProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepairProgress::IsInitialized() const {
  return true;
}

void RepairProgress::InternalSwap(RepairProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepairProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateProgress::InitAsDefaultInstance() {
}
class UpdateProgress::_Internal {
 public:
};

UpdateProgress::UpdateProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UpdateProgress)
}
UpdateProgress::UpdateProgress(const UpdateProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_disc_set_used_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_disc_set_used().empty()) {
    last_disc_set_used_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_last_disc_set_used(),
      GetArena());
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&disc_ignored_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(disc_ignored_));
  // @@protoc_insertion_point(copy_constructor:UpdateProgress)
}

void UpdateProgress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateProgress_schema_2eproto.base);
  last_disc_set_used_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disc_ignored_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(disc_ignored_));
}

UpdateProgress::~UpdateProgress() {
  // @@protoc_insertion_point(destructor:UpdateProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_disc_set_used_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateProgress::ArenaDtor(void* object) {
  UpdateProgress* _this = reinterpret_cast< UpdateProgress* >(object);
  (void)_this;
}
void UpdateProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateProgress& UpdateProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateProgress_schema_2eproto.base);
  return *internal_default_instance();
}


void UpdateProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:UpdateProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_disc_set_used_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disc_ignored_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(disc_ignored_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string last_disc_set_used = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_last_disc_set_used();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpdateProgress.last_disc_set_used"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool disc_ignored = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          disc_ignored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_to_download = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_to_download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 download_remaining = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          download_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpdateProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string last_disc_set_used = 1;
  if (this->last_disc_set_used().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_disc_set_used().data(), static_cast<int>(this->_internal_last_disc_set_used().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpdateProgress.last_disc_set_used");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_last_disc_set_used(), target);
  }

  // double progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_progress(), target);
  }

  // bool disc_ignored = 3;
  if (this->disc_ignored() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_disc_ignored(), target);
  }

  // uint64 total_to_download = 4;
  if (this->total_to_download() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_total_to_download(), target);
  }

  // uint64 download_remaining = 5;
  if (this->download_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_download_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpdateProgress)
  return target;
}

size_t UpdateProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpdateProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last_disc_set_used = 1;
  if (this->last_disc_set_used().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_disc_set_used());
  }

  // double progress = 2;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 total_to_download = 4;
  if (this->total_to_download() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_to_download());
  }

  // uint64 download_remaining = 5;
  if (this->download_remaining() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_download_remaining());
  }

  // bool disc_ignored = 3;
  if (this->disc_ignored() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpdateProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpdateProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpdateProgress)
    MergeFrom(*source);
  }
}

void UpdateProgress::MergeFrom(const UpdateProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpdateProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_disc_set_used().size() > 0) {
    _internal_set_last_disc_set_used(from._internal_last_disc_set_used());
  }
  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    _internal_set_progress(from._internal_progress());
  }
  if (from.total_to_download() != 0) {
    _internal_set_total_to_download(from._internal_total_to_download());
  }
  if (from.download_remaining() != 0) {
    _internal_set_download_remaining(from._internal_download_remaining());
  }
  if (from.disc_ignored() != 0) {
    _internal_set_disc_ignored(from._internal_disc_ignored());
  }
}

void UpdateProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpdateProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateProgress::CopyFrom(const UpdateProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpdateProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProgress::IsInitialized() const {
  return true;
}

void UpdateProgress::InternalSwap(UpdateProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  last_disc_set_used_.Swap(&other->last_disc_set_used_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateProgress, disc_ignored_)
      + sizeof(UpdateProgress::disc_ignored_)
      - PROTOBUF_FIELD_OFFSET(UpdateProgress, progress_)>(
          reinterpret_cast<char*>(&progress_),
          reinterpret_cast<char*>(&other->progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CachedProductState::InitAsDefaultInstance() {
  ::_CachedProductState_default_instance_._instance.get_mutable()->base_product_state_ = const_cast< ::BaseProductState*>(
      ::BaseProductState::internal_default_instance());
  ::_CachedProductState_default_instance_._instance.get_mutable()->backfill_progress_ = const_cast< ::BackfillProgress*>(
      ::BackfillProgress::internal_default_instance());
  ::_CachedProductState_default_instance_._instance.get_mutable()->repair_progress_ = const_cast< ::RepairProgress*>(
      ::RepairProgress::internal_default_instance());
  ::_CachedProductState_default_instance_._instance.get_mutable()->update_progress_ = const_cast< ::UpdateProgress*>(
      ::UpdateProgress::internal_default_instance());
}
class CachedProductState::_Internal {
 public:
  static const ::BaseProductState& base_product_state(const CachedProductState* msg);
  static const ::BackfillProgress& backfill_progress(const CachedProductState* msg);
  static const ::RepairProgress& repair_progress(const CachedProductState* msg);
  static const ::UpdateProgress& update_progress(const CachedProductState* msg);
};

const ::BaseProductState&
CachedProductState::_Internal::base_product_state(const CachedProductState* msg) {
  return *msg->base_product_state_;
}
const ::BackfillProgress&
CachedProductState::_Internal::backfill_progress(const CachedProductState* msg) {
  return *msg->backfill_progress_;
}
const ::RepairProgress&
CachedProductState::_Internal::repair_progress(const CachedProductState* msg) {
  return *msg->repair_progress_;
}
const ::UpdateProgress&
CachedProductState::_Internal::update_progress(const CachedProductState* msg) {
  return *msg->update_progress_;
}
CachedProductState::CachedProductState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CachedProductState)
}
CachedProductState::CachedProductState(const CachedProductState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_product_state()) {
    base_product_state_ = new ::BaseProductState(*from.base_product_state_);
  } else {
    base_product_state_ = nullptr;
  }
  if (from._internal_has_backfill_progress()) {
    backfill_progress_ = new ::BackfillProgress(*from.backfill_progress_);
  } else {
    backfill_progress_ = nullptr;
  }
  if (from._internal_has_repair_progress()) {
    repair_progress_ = new ::RepairProgress(*from.repair_progress_);
  } else {
    repair_progress_ = nullptr;
  }
  if (from._internal_has_update_progress()) {
    update_progress_ = new ::UpdateProgress(*from.update_progress_);
  } else {
    update_progress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CachedProductState)
}

void CachedProductState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CachedProductState_schema_2eproto.base);
  ::memset(&base_product_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_progress_) -
      reinterpret_cast<char*>(&base_product_state_)) + sizeof(update_progress_));
}

CachedProductState::~CachedProductState() {
  // @@protoc_insertion_point(destructor:CachedProductState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CachedProductState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_product_state_;
  if (this != internal_default_instance()) delete backfill_progress_;
  if (this != internal_default_instance()) delete repair_progress_;
  if (this != internal_default_instance()) delete update_progress_;
}

void CachedProductState::ArenaDtor(void* object) {
  CachedProductState* _this = reinterpret_cast< CachedProductState* >(object);
  (void)_this;
}
void CachedProductState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CachedProductState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CachedProductState& CachedProductState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CachedProductState_schema_2eproto.base);
  return *internal_default_instance();
}


void CachedProductState::Clear() {
// @@protoc_insertion_point(message_clear_start:CachedProductState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_product_state_ != nullptr) {
    delete base_product_state_;
  }
  base_product_state_ = nullptr;
  if (GetArena() == nullptr && backfill_progress_ != nullptr) {
    delete backfill_progress_;
  }
  backfill_progress_ = nullptr;
  if (GetArena() == nullptr && repair_progress_ != nullptr) {
    delete repair_progress_;
  }
  repair_progress_ = nullptr;
  if (GetArena() == nullptr && update_progress_ != nullptr) {
    delete update_progress_;
  }
  update_progress_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CachedProductState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BaseProductState base_product_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_product_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BackfillProgress backfill_progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_backfill_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RepairProgress repair_progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_repair_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UpdateProgress update_progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CachedProductState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CachedProductState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BaseProductState base_product_state = 1;
  if (this->has_base_product_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_product_state(this), target, stream);
  }

  // .BackfillProgress backfill_progress = 2;
  if (this->has_backfill_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::backfill_progress(this), target, stream);
  }

  // .RepairProgress repair_progress = 3;
  if (this->has_repair_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::repair_progress(this), target, stream);
  }

  // .UpdateProgress update_progress = 4;
  if (this->has_update_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::update_progress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CachedProductState)
  return target;
}

size_t CachedProductState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CachedProductState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BaseProductState base_product_state = 1;
  if (this->has_base_product_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_product_state_);
  }

  // .BackfillProgress backfill_progress = 2;
  if (this->has_backfill_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *backfill_progress_);
  }

  // .RepairProgress repair_progress = 3;
  if (this->has_repair_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repair_progress_);
  }

  // .UpdateProgress update_progress = 4;
  if (this->has_update_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_progress_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CachedProductState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CachedProductState)
  GOOGLE_DCHECK_NE(&from, this);
  const CachedProductState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CachedProductState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CachedProductState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CachedProductState)
    MergeFrom(*source);
  }
}

void CachedProductState::MergeFrom(const CachedProductState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CachedProductState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_product_state()) {
    _internal_mutable_base_product_state()->::BaseProductState::MergeFrom(from._internal_base_product_state());
  }
  if (from.has_backfill_progress()) {
    _internal_mutable_backfill_progress()->::BackfillProgress::MergeFrom(from._internal_backfill_progress());
  }
  if (from.has_repair_progress()) {
    _internal_mutable_repair_progress()->::RepairProgress::MergeFrom(from._internal_repair_progress());
  }
  if (from.has_update_progress()) {
    _internal_mutable_update_progress()->::UpdateProgress::MergeFrom(from._internal_update_progress());
  }
}

void CachedProductState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CachedProductState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedProductState::CopyFrom(const CachedProductState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CachedProductState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedProductState::IsInitialized() const {
  return true;
}

void CachedProductState::InternalSwap(CachedProductState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CachedProductState, update_progress_)
      + sizeof(CachedProductState::update_progress_)
      - PROTOBUF_FIELD_OFFSET(CachedProductState, base_product_state_)>(
          reinterpret_cast<char*>(&base_product_state_),
          reinterpret_cast<char*>(&other->base_product_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CachedProductState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProductOperations::InitAsDefaultInstance() {
}
class ProductOperations::_Internal {
 public:
};

ProductOperations::ProductOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProductOperations)
}
ProductOperations::ProductOperations(const ProductOperations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&priority_, &from.priority_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_operation_) -
    reinterpret_cast<char*>(&priority_)) + sizeof(active_operation_));
  // @@protoc_insertion_point(copy_constructor:ProductOperations)
}

void ProductOperations::SharedCtor() {
  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_operation_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(active_operation_));
}

ProductOperations::~ProductOperations() {
  // @@protoc_insertion_point(destructor:ProductOperations)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProductOperations::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProductOperations::ArenaDtor(void* object) {
  ProductOperations* _this = reinterpret_cast< ProductOperations* >(object);
  (void)_this;
}
void ProductOperations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductOperations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProductOperations& ProductOperations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProductOperations_schema_2eproto.base);
  return *internal_default_instance();
}


void ProductOperations::Clear() {
// @@protoc_insertion_point(message_clear_start:ProductOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_operation_) -
      reinterpret_cast<char*>(&priority_)) + sizeof(active_operation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductOperations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Operation active_operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_active_operation(static_cast<::Operation>(val));
        } else goto handle_unusual;
        continue;
      // uint64 priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductOperations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProductOperations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Operation active_operation = 1;
  if (this->active_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_active_operation(), target);
  }

  // uint64 priority = 2;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProductOperations)
  return target;
}

size_t ProductOperations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProductOperations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 priority = 2;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_priority());
  }

  // .Operation active_operation = 1;
  if (this->active_operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_active_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductOperations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProductOperations)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductOperations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductOperations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProductOperations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProductOperations)
    MergeFrom(*source);
  }
}

void ProductOperations::MergeFrom(const ProductOperations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProductOperations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.active_operation() != 0) {
    _internal_set_active_operation(from._internal_active_operation());
  }
}

void ProductOperations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProductOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductOperations::CopyFrom(const ProductOperations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProductOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductOperations::IsInitialized() const {
  return true;
}

void ProductOperations::InternalSwap(ProductOperations* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductOperations, active_operation_)
      + sizeof(ProductOperations::active_operation_)
      - PROTOBUF_FIELD_OFFSET(ProductOperations, priority_)>(
          reinterpret_cast<char*>(&priority_),
          reinterpret_cast<char*>(&other->priority_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductOperations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProductInstall::InitAsDefaultInstance() {
  ::_ProductInstall_default_instance_._instance.get_mutable()->settings_ = const_cast< ::UserSettings*>(
      ::UserSettings::internal_default_instance());
  ::_ProductInstall_default_instance_._instance.get_mutable()->cached_product_state_ = const_cast< ::CachedProductState*>(
      ::CachedProductState::internal_default_instance());
  ::_ProductInstall_default_instance_._instance.get_mutable()->product_operations_ = const_cast< ::ProductOperations*>(
      ::ProductOperations::internal_default_instance());
}
class ProductInstall::_Internal {
 public:
  static const ::UserSettings& settings(const ProductInstall* msg);
  static const ::CachedProductState& cached_product_state(const ProductInstall* msg);
  static const ::ProductOperations& product_operations(const ProductInstall* msg);
};

const ::UserSettings&
ProductInstall::_Internal::settings(const ProductInstall* msg) {
  return *msg->settings_;
}
const ::CachedProductState&
ProductInstall::_Internal::cached_product_state(const ProductInstall* msg) {
  return *msg->cached_product_state_;
}
const ::ProductOperations&
ProductInstall::_Internal::product_operations(const ProductInstall* msg) {
  return *msg->product_operations_;
}
ProductInstall::ProductInstall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProductInstall)
}
ProductInstall::ProductInstall(const ProductInstall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uid(),
      GetArena());
  }
  product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_code().empty()) {
    product_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product_code(),
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::UserSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_cached_product_state()) {
    cached_product_state_ = new ::CachedProductState(*from.cached_product_state_);
  } else {
    cached_product_state_ = nullptr;
  }
  if (from._internal_has_product_operations()) {
    product_operations_ = new ::ProductOperations(*from.product_operations_);
  } else {
    product_operations_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProductInstall)
}

void ProductInstall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProductInstall_schema_2eproto.base);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_operations_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(product_operations_));
}

ProductInstall::~ProductInstall() {
  // @@protoc_insertion_point(destructor:ProductInstall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProductInstall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete cached_product_state_;
  if (this != internal_default_instance()) delete product_operations_;
}

void ProductInstall::ArenaDtor(void* object) {
  ProductInstall* _this = reinterpret_cast< ProductInstall* >(object);
  (void)_this;
}
void ProductInstall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductInstall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProductInstall& ProductInstall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProductInstall_schema_2eproto.base);
  return *internal_default_instance();
}


void ProductInstall::Clear() {
// @@protoc_insertion_point(message_clear_start:ProductInstall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArena() == nullptr && cached_product_state_ != nullptr) {
    delete cached_product_state_;
  }
  cached_product_state_ = nullptr;
  if (GetArena() == nullptr && product_operations_ != nullptr) {
    delete product_operations_;
  }
  product_operations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductInstall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProductInstall.uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProductInstall.product_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UserSettings settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CachedProductState cached_product_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cached_product_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ProductOperations product_operations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_product_operations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductInstall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProductInstall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProductInstall.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string product_code = 2;
  if (this->product_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_code().data(), static_cast<int>(this->_internal_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProductInstall.product_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_product_code(), target);
  }

  // .UserSettings settings = 3;
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::settings(this), target, stream);
  }

  // .CachedProductState cached_product_state = 4;
  if (this->has_cached_product_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cached_product_state(this), target, stream);
  }

  // .ProductOperations product_operations = 5;
  if (this->has_product_operations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::product_operations(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProductInstall)
  return target;
}

size_t ProductInstall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProductInstall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string product_code = 2;
  if (this->product_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_code());
  }

  // .UserSettings settings = 3;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .CachedProductState cached_product_state = 4;
  if (this->has_cached_product_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cached_product_state_);
  }

  // .ProductOperations product_operations = 5;
  if (this->has_product_operations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *product_operations_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductInstall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProductInstall)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductInstall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductInstall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProductInstall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProductInstall)
    MergeFrom(*source);
  }
}

void ProductInstall::MergeFrom(const ProductInstall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProductInstall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid().size() > 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.product_code().size() > 0) {
    _internal_set_product_code(from._internal_product_code());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::UserSettings::MergeFrom(from._internal_settings());
  }
  if (from.has_cached_product_state()) {
    _internal_mutable_cached_product_state()->::CachedProductState::MergeFrom(from._internal_cached_product_state());
  }
  if (from.has_product_operations()) {
    _internal_mutable_product_operations()->::ProductOperations::MergeFrom(from._internal_product_operations());
  }
}

void ProductInstall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProductInstall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductInstall::CopyFrom(const ProductInstall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProductInstall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductInstall::IsInitialized() const {
  return true;
}

void ProductInstall::InternalSwap(ProductInstall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_code_.Swap(&other->product_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductInstall, product_operations_)
      + sizeof(ProductInstall::product_operations_)
      - PROTOBUF_FIELD_OFFSET(ProductInstall, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductInstall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProductConfig::InitAsDefaultInstance() {
}
class ProductConfig::_Internal {
 public:
};

ProductConfig::ProductConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProductConfig)
}
ProductConfig::ProductConfig(const ProductConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_code().empty()) {
    product_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product_code(),
      GetArena());
  }
  metadata_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata_hash().empty()) {
    metadata_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata_hash(),
      GetArena());
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timestamp(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ProductConfig)
}

void ProductConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProductConfig_schema_2eproto.base);
  product_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProductConfig::~ProductConfig() {
  // @@protoc_insertion_point(destructor:ProductConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProductConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  product_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProductConfig::ArenaDtor(void* object) {
  ProductConfig* _this = reinterpret_cast< ProductConfig* >(object);
  (void)_this;
}
void ProductConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProductConfig& ProductConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProductConfig_schema_2eproto.base);
  return *internal_default_instance();
}


void ProductConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ProductConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string product_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_product_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProductConfig.product_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metadata_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_metadata_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProductConfig.metadata_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProductConfig.timestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProductConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_code = 1;
  if (this->product_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_code().data(), static_cast<int>(this->_internal_product_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProductConfig.product_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_product_code(), target);
  }

  // string metadata_hash = 2;
  if (this->metadata_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metadata_hash().data(), static_cast<int>(this->_internal_metadata_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProductConfig.metadata_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_metadata_hash(), target);
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProductConfig.timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProductConfig)
  return target;
}

size_t ProductConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProductConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string product_code = 1;
  if (this->product_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_code());
  }

  // string metadata_hash = 2;
  if (this->metadata_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metadata_hash());
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProductConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProductConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProductConfig)
    MergeFrom(*source);
  }
}

void ProductConfig::MergeFrom(const ProductConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProductConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_code().size() > 0) {
    _internal_set_product_code(from._internal_product_code());
  }
  if (from.metadata_hash().size() > 0) {
    _internal_set_metadata_hash(from._internal_metadata_hash());
  }
  if (from.timestamp().size() > 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void ProductConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProductConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductConfig::CopyFrom(const ProductConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProductConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductConfig::IsInitialized() const {
  return true;
}

void ProductConfig::InternalSwap(ProductConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  product_code_.Swap(&other->product_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_hash_.Swap(&other->metadata_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActiveProcess::InitAsDefaultInstance() {
}
class ActiveProcess::_Internal {
 public:
};

ActiveProcess::ActiveProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uri_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ActiveProcess)
}
ActiveProcess::ActiveProcess(const ActiveProcess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uri_(from.uri_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_process_name().empty()) {
    process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_process_name(),
      GetArena());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:ActiveProcess)
}

void ActiveProcess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveProcess_schema_2eproto.base);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pid_ = 0;
}

ActiveProcess::~ActiveProcess() {
  // @@protoc_insertion_point(destructor:ActiveProcess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActiveProcess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActiveProcess::ArenaDtor(void* object) {
  ActiveProcess* _this = reinterpret_cast< ActiveProcess* >(object);
  (void)_this;
}
void ActiveProcess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActiveProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveProcess& ActiveProcess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveProcess_schema_2eproto.base);
  return *internal_default_instance();
}


void ActiveProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:ActiveProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.Clear();
  process_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveProcess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string process_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_process_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActiveProcess.process_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string uri = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_uri();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ActiveProcess.uri"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveProcess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActiveProcess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string process_name = 1;
  if (this->process_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_name().data(), static_cast<int>(this->_internal_process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActiveProcess.process_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_process_name(), target);
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pid(), target);
  }

  // repeated string uri = 3;
  for (int i = 0, n = this->_internal_uri_size(); i < n; i++) {
    const auto& s = this->_internal_uri(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ActiveProcess.uri");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActiveProcess)
  return target;
}

size_t ActiveProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActiveProcess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string uri = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(uri_.size());
  for (int i = 0, n = uri_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      uri_.Get(i));
  }

  // string process_name = 1;
  if (this->process_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_name());
  }

  // int32 pid = 2;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveProcess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ActiveProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveProcess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveProcess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ActiveProcess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ActiveProcess)
    MergeFrom(*source);
  }
}

void ActiveProcess::MergeFrom(const ActiveProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ActiveProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uri_.MergeFrom(from.uri_);
  if (from.process_name().size() > 0) {
    _internal_set_process_name(from._internal_process_name());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
}

void ActiveProcess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ActiveProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveProcess::CopyFrom(const ActiveProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActiveProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveProcess::IsInitialized() const {
  return true;
}

void ActiveProcess::InternalSwap(ActiveProcess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uri_.InternalSwap(&other->uri_);
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveProcess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadSettings::InitAsDefaultInstance() {
}
class DownloadSettings::_Internal {
 public:
};

DownloadSettings::DownloadSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DownloadSettings)
}
DownloadSettings::DownloadSettings(const DownloadSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&download_limit_, &from.download_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&backfill_limit_) -
    reinterpret_cast<char*>(&download_limit_)) + sizeof(backfill_limit_));
  // @@protoc_insertion_point(copy_constructor:DownloadSettings)
}

void DownloadSettings::SharedCtor() {
  ::memset(&download_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backfill_limit_) -
      reinterpret_cast<char*>(&download_limit_)) + sizeof(backfill_limit_));
}

DownloadSettings::~DownloadSettings() {
  // @@protoc_insertion_point(destructor:DownloadSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DownloadSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DownloadSettings::ArenaDtor(void* object) {
  DownloadSettings* _this = reinterpret_cast< DownloadSettings* >(object);
  (void)_this;
}
void DownloadSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadSettings& DownloadSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadSettings_schema_2eproto.base);
  return *internal_default_instance();
}


void DownloadSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:DownloadSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&download_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backfill_limit_) -
      reinterpret_cast<char*>(&download_limit_)) + sizeof(backfill_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 download_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          download_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 backfill_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          backfill_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DownloadSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 download_limit = 1;
  if (this->download_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_download_limit(), target);
  }

  // int32 backfill_limit = 2;
  if (this->backfill_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_backfill_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DownloadSettings)
  return target;
}

size_t DownloadSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DownloadSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 download_limit = 1;
  if (this->download_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_download_limit());
  }

  // int32 backfill_limit = 2;
  if (this->backfill_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_backfill_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DownloadSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DownloadSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DownloadSettings)
    MergeFrom(*source);
  }
}

void DownloadSettings::MergeFrom(const DownloadSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DownloadSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.download_limit() != 0) {
    _internal_set_download_limit(from._internal_download_limit());
  }
  if (from.backfill_limit() != 0) {
    _internal_set_backfill_limit(from._internal_backfill_limit());
  }
}

void DownloadSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DownloadSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadSettings::CopyFrom(const DownloadSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DownloadSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadSettings::IsInitialized() const {
  return true;
}

void DownloadSettings::InternalSwap(DownloadSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownloadSettings, backfill_limit_)
      + sizeof(DownloadSettings::backfill_limit_)
      - PROTOBUF_FIELD_OFFSET(DownloadSettings, download_limit_)>(
          reinterpret_cast<char*>(&download_limit_),
          reinterpret_cast<char*>(&other->download_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProductDb::InitAsDefaultInstance() {
  ::_ProductDb_default_instance_._instance.get_mutable()->download_settings_ = const_cast< ::DownloadSettings*>(
      ::DownloadSettings::internal_default_instance());
}
class ProductDb::_Internal {
 public:
  static const ::DownloadSettings& download_settings(const ProductDb* msg);
};

const ::DownloadSettings&
ProductDb::_Internal::download_settings(const ProductDb* msg) {
  return *msg->download_settings_;
}
ProductDb::ProductDb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  product_installs_(arena),
  active_installs_(arena),
  active_processes_(arena),
  product_configs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProductDb)
}
ProductDb::ProductDb(const ProductDb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      product_installs_(from.product_installs_),
      active_installs_(from.active_installs_),
      active_processes_(from.active_processes_),
      product_configs_(from.product_configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_download_settings()) {
    download_settings_ = new ::DownloadSettings(*from.download_settings_);
  } else {
    download_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProductDb)
}

void ProductDb::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProductDb_schema_2eproto.base);
  download_settings_ = nullptr;
}

ProductDb::~ProductDb() {
  // @@protoc_insertion_point(destructor:ProductDb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProductDb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete download_settings_;
}

void ProductDb::ArenaDtor(void* object) {
  ProductDb* _this = reinterpret_cast< ProductDb* >(object);
  (void)_this;
}
void ProductDb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductDb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProductDb& ProductDb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProductDb_schema_2eproto.base);
  return *internal_default_instance();
}


void ProductDb::Clear() {
// @@protoc_insertion_point(message_clear_start:ProductDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_installs_.Clear();
  active_installs_.Clear();
  active_processes_.Clear();
  product_configs_.Clear();
  if (GetArena() == nullptr && download_settings_ != nullptr) {
    delete download_settings_;
  }
  download_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductDb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ProductInstall product_installs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_product_installs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .InstallHandshake active_installs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_installs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ActiveProcess active_processes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ProductConfig product_configs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_product_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .DownloadSettings download_settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_download_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductDb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProductDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProductInstall product_installs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_product_installs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_product_installs(i), target, stream);
  }

  // repeated .InstallHandshake active_installs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_installs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_active_installs(i), target, stream);
  }

  // repeated .ActiveProcess active_processes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_active_processes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_active_processes(i), target, stream);
  }

  // repeated .ProductConfig product_configs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_product_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_product_configs(i), target, stream);
  }

  // .DownloadSettings download_settings = 5;
  if (this->has_download_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::download_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProductDb)
  return target;
}

size_t ProductDb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProductDb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProductInstall product_installs = 1;
  total_size += 1UL * this->_internal_product_installs_size();
  for (const auto& msg : this->product_installs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .InstallHandshake active_installs = 2;
  total_size += 1UL * this->_internal_active_installs_size();
  for (const auto& msg : this->active_installs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ActiveProcess active_processes = 3;
  total_size += 1UL * this->_internal_active_processes_size();
  for (const auto& msg : this->active_processes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ProductConfig product_configs = 4;
  total_size += 1UL * this->_internal_product_configs_size();
  for (const auto& msg : this->product_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DownloadSettings download_settings = 5;
  if (this->has_download_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *download_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductDb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProductDb)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductDb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductDb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProductDb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProductDb)
    MergeFrom(*source);
  }
}

void ProductDb::MergeFrom(const ProductDb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProductDb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  product_installs_.MergeFrom(from.product_installs_);
  active_installs_.MergeFrom(from.active_installs_);
  active_processes_.MergeFrom(from.active_processes_);
  product_configs_.MergeFrom(from.product_configs_);
  if (from.has_download_settings()) {
    _internal_mutable_download_settings()->::DownloadSettings::MergeFrom(from._internal_download_settings());
  }
}

void ProductDb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProductDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductDb::CopyFrom(const ProductDb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProductDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductDb::IsInitialized() const {
  return true;
}

void ProductDb::InternalSwap(ProductDb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  product_installs_.InternalSwap(&other->product_installs_);
  active_installs_.InternalSwap(&other->active_installs_);
  active_processes_.InternalSwap(&other->active_processes_);
  product_configs_.InternalSwap(&other->product_configs_);
  swap(download_settings_, other->download_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductDb::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LanguageSetting* Arena::CreateMaybeMessage< ::LanguageSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LanguageSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::UserSettings* Arena::CreateMaybeMessage< ::UserSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::InstallHandshake* Arena::CreateMaybeMessage< ::InstallHandshake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InstallHandshake >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildConfig* Arena::CreateMaybeMessage< ::BuildConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BaseProductState* Arena::CreateMaybeMessage< ::BaseProductState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BaseProductState >(arena);
}
template<> PROTOBUF_NOINLINE ::BackfillProgress* Arena::CreateMaybeMessage< ::BackfillProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BackfillProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::RepairProgress* Arena::CreateMaybeMessage< ::RepairProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RepairProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::UpdateProgress* Arena::CreateMaybeMessage< ::UpdateProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UpdateProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CachedProductState* Arena::CreateMaybeMessage< ::CachedProductState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CachedProductState >(arena);
}
template<> PROTOBUF_NOINLINE ::ProductOperations* Arena::CreateMaybeMessage< ::ProductOperations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProductOperations >(arena);
}
template<> PROTOBUF_NOINLINE ::ProductInstall* Arena::CreateMaybeMessage< ::ProductInstall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProductInstall >(arena);
}
template<> PROTOBUF_NOINLINE ::ProductConfig* Arena::CreateMaybeMessage< ::ProductConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProductConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ActiveProcess* Arena::CreateMaybeMessage< ::ActiveProcess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ActiveProcess >(arena);
}
template<> PROTOBUF_NOINLINE ::DownloadSettings* Arena::CreateMaybeMessage< ::DownloadSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DownloadSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::ProductDb* Arena::CreateMaybeMessage< ::ProductDb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProductDb >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
